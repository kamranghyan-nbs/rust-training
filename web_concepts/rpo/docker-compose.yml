version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: pos_auth
      POSTGRES_USER: pos_user
      POSTGRES_PASSWORD: pos_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pos_user -d pos_auth"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      AUTH_DATABASE__URL: postgres://pos_user:pos_password@postgres:5432/pos_auth
      AUTH_DATABASE__MAX_CONNECTIONS: 10
      AUTH_DATABASE__MIN_CONNECTIONS: 2
      AUTH_DATABASE__ACQUIRE_TIMEOUT: 30
      AUTH_DATABASE__IDLE_TIMEOUT: 300
      
      # JWT configuration
      AUTH_JWT__SECRET: your-super-secret-jwt-key-change-in-production-make-it-long-and-random-at-least-32-characters
      AUTH_JWT__ACCESS_TOKEN_EXPIRE_MINUTES: 60
      AUTH_JWT__REFRESH_TOKEN_EXPIRE_DAYS: 7
      AUTH_JWT__ISSUER: pos-system
      
      # Server configuration
      AUTH_SERVER__HOST: 0.0.0.0
      AUTH_SERVER__PORT: 8080
      AUTH_SERVER__WORKERS: 4
      
      # Logging configuration
      AUTH_LOGGING__LEVEL: info
      AUTH_LOGGING__FORMAT: json
      
      # Don't try to load config file - use env vars only
      # AUTH_CONFIG_PATH: ""
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: sh -c "./migrator up && ./auth-service"

volumes:
  postgres_data: